#!/usr/bin/env python3
"""
OpenRouter Backend Configuration Manager for Open WebUI

üéØ PURPOSE: Configure the BACKEND authentication and API settings for OpenRouter
   - This script sets up the Docker environment variables needed for authentication
   - After running this, you still need to manually add specific models in the Open WebUI interface
   - Think of this as "setting up your internet connection" before "choosing which apps to install"

üìã WORKFLOW:
   1. Run this script to configure backend API authentication
   2. Restart Docker to load the new environment variables  
   3. Manually add specific models in Open WebUI Admin Panel ‚Üí Connections
   4. Models will then appear in your model selector dropdown

üîë WHY BOTH ARE NEEDED:
   - This script: Provides the API key so Docker can authenticate with OpenRouter
   - Manual UI: Tells Open WebUI which specific models you want to use
   - Without this script: Manual UI model addition will fail with authentication errors
   - Without manual UI: You have authentication but no models registered
"""

import os
import sys
import subprocess
import json
from pathlib import Path
from typing import Dict, List, Optional

# Add the module_venv path for venv management
sys.path.insert(0, os.path.expanduser("~/py-utils"))

try:
    import module_venv
    # Setup virtual environment with auto-switching
    auto_venv = module_venv.AutoVirtualEnvironment(
        custom_name="openrouter-manager",
        auto_packages=["python-dotenv", "requests", "rich"]
    )
    auto_venv.auto_switch()
except ImportError:
    print("‚ö†Ô∏è  Warning: module_venv not found. Installing dependencies globally...")

try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table
    from rich.prompt import Prompt, Confirm
    from rich.columns import Columns
    from dotenv import load_dotenv, set_key, unset_key
    import requests
except ImportError as e:
    print(f"‚ùå Missing required packages: {e}")
    print("Installing required packages...")
    subprocess.run([sys.executable, "-m", "pip", "install", "python-dotenv", "requests", "rich"], check=True)
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table
    from rich.prompt import Prompt, Confirm
    from rich.columns import Columns
    from dotenv import load_dotenv, set_key, unset_key
    import requests

console = Console()

class OpenRouterManager:
    def __init__(self):
        self.env_file = Path(".env")
        self.docker_compose_file = Path("docker-compose.yaml")
        self.config = self.load_config()
        self.model_queue = []  # Queue for models to be added manually

    def load_config(self) -> Dict:
        """Load current configuration from environment"""
        if self.env_file.exists():
            load_dotenv(self.env_file)
        
        return {
            'ENABLE_OPENROUTER_API': os.getenv('ENABLE_OPENROUTER_API', 'true'),
            'OPENROUTER_API_KEY': os.getenv('OPENROUTER_API_KEY', ''),
            'OPENROUTER_API_BASE_URL': os.getenv('OPENROUTER_API_BASE_URL', 'https://openrouter.ai/api/v1'),
        }

    def save_config(self):
        """Save configuration to .env file"""
        if not self.env_file.exists():
            self.env_file.touch()
        
        for key, value in self.config.items():
            if value:
                set_key(self.env_file, key, value)
            else:
                unset_key(self.env_file, key)

    def show_header(self):
        """Display the application header"""
        console.clear()
        header = Panel(
            "üîß OpenRouter Backend Configuration Manager\n" +
            "üéØ Purpose: Configure API authentication for Docker container\n" +
            "üìã Next Step: Manually add specific models in Open WebUI interface",
            style="bold bright_blue"
        )
        console.print(header)

    def show_workflow_info(self):
        """Display the workflow information"""
        workflow = Panel(
            "üìã Complete Workflow:\n" +
            "1. üîß Configure API key (this script)\n" +
            "2. üê≥ Restart Docker services (this script)\n" +
            "3. üñ•Ô∏è  Add specific models in UI (Admin Panel ‚Üí Connections)\n" +
            "4. ‚úÖ Models appear in Open WebUI dropdown",
            title="How OpenRouter Integration Works",
            style="bright_cyan"
        )
        console.print(workflow)

    def show_status(self):
        """Display current configuration status"""
        status_table = Table(title="üìä Backend Configuration Status")
        status_table.add_column("Setting", style="bright_cyan")
        status_table.add_column("Value", style="bright_green")
        status_table.add_column("Status", style="bright_yellow")
        
        # API Status
        api_enabled = self.config['ENABLE_OPENROUTER_API'].lower() == 'true'
        status_table.add_row("üîå API Enabled", self.config['ENABLE_OPENROUTER_API'], "‚úÖ Ready" if api_enabled else "‚ùå Disabled")
        
        # API Key Status
        key = self.config['OPENROUTER_API_KEY']
        if key:
            masked_key = f"{key[:8]}...{key[-4:]}" if len(key) > 12 else key
            status = "‚úÖ Configured"
        else:
            masked_key = "Not set"
            status = "‚ùå Missing"
        status_table.add_row("üîë API Key", masked_key, status)
        
        # Base URL
        status_table.add_row("üåê Base URL", self.config['OPENROUTER_API_BASE_URL'], "‚úÖ Set")
        
        # Next steps
        if key and api_enabled:
            next_step = "‚úÖ Ready for UI model addition"
        else:
            next_step = "‚ö†Ô∏è  Configure API key first"
        status_table.add_row("üìã Next Step", "Add models in UI", next_step)
        
        console.print(status_table)

    def show_menu(self):
        """Display the main menu"""
        console.print("\nüéØ Backend Configuration Menu:")
        console.print("1. üîß Configure OpenRouter API Authentication")
        console.print("2. üìä View Current Backend Configuration")
        console.print("3. üß™ Test OpenRouter API Connection")
        console.print("4. üîç Discover & Queue Models for UI Addition")
        console.print("5. üìã View Queued Models & Copy Instructions")
        console.print("6. üê≥ Restart Docker Services")
        console.print("7. üìù Generate .env Template")
        console.print("8. ‚ùì Help & UI Addition Guide")
        console.print("9. üö™ Exit")

    def configure_api(self):
        """Configure OpenRouter API settings"""
        console.clear()
        console.print(Panel("üîß OpenRouter Backend API Configuration", style="bold bright_blue"))
        
        # Enable/Disable API
        current_enabled = self.config['ENABLE_OPENROUTER_API'].lower() == 'true'
        enable_api = Confirm.ask(f"Enable OpenRouter API? (currently: {'‚úÖ enabled' if current_enabled else '‚ùå disabled'})", 
                               default=current_enabled)
        self.config['ENABLE_OPENROUTER_API'] = 'true' if enable_api else 'false'
        
        if enable_api:
            # API Key
            console.print("\nüîë API Key Configuration")
            current_key = self.config['OPENROUTER_API_KEY']
            if current_key:
                console.print(f"Current key: {current_key[:8]}...{current_key[-4:] if len(current_key) > 12 else current_key}")
                update_key = Confirm.ask("Update API key?", default=False)
            else:
                console.print("‚ùå No API key configured")
                update_key = True
            
            if update_key:
                new_key = Prompt.ask("Enter your OpenRouter API key", password=True)
                if new_key.strip():
                    self.config['OPENROUTER_API_KEY'] = new_key.strip()
                    console.print("‚úÖ API key updated", style="bright_green")
            
            # Base URL
            console.print("\nüåê Base URL Configuration")
            current_url = self.config['OPENROUTER_API_BASE_URL']
            console.print(f"Current URL: {current_url}")
            
            if Confirm.ask("Use custom base URL?", default=False):
                new_url = Prompt.ask("Enter custom base URL", default=current_url)
                self.config['OPENROUTER_API_BASE_URL'] = new_url
        
        # Save configuration
        self.save_config()
        console.print("\nüíæ Backend configuration saved!", style="bright_green")
        console.print("üìã Next step: Restart Docker and add models in UI", style="bright_cyan")
        input("\nPress Enter to continue...")

    def view_config(self):
        """Display current configuration"""
        console.clear()
        console.print(Panel("üìä Current OpenRouter Backend Configuration", style="bold bright_blue"))
        
        config_table = Table(title="Backend Configuration Details")
        config_table.add_column("Setting", style="bright_cyan")
        config_table.add_column("Value", style="bright_green")
        config_table.add_column("Status", style="bright_yellow")
        
        # API Enabled
        enabled = self.config['ENABLE_OPENROUTER_API'].lower() == 'true'
        config_table.add_row("API Enabled", self.config['ENABLE_OPENROUTER_API'], "‚úÖ Ready" if enabled else "‚ùå Disabled")
        
        # API Key
        key = self.config['OPENROUTER_API_KEY']
        if key:
            masked_key = f"{key[:8]}...{key[-4:]}" if len(key) > 12 else key
            status = "‚úÖ Configured"
        else:
            masked_key = "Not set"
            status = "‚ùå Missing"
        config_table.add_row("API Key", masked_key, status)
        
        # Base URL
        config_table.add_row("Base URL", self.config['OPENROUTER_API_BASE_URL'], "‚úÖ Set")
        
        console.print(config_table)
        
        # Environment file status
        if self.env_file.exists():
            console.print(f"\nüìÅ Configuration file: {self.env_file.absolute()}", style="bright_cyan")
        else:
            console.print("\n‚ö†Ô∏è  No .env file found", style="bright_red")
        
        # Next steps
        if key and enabled:
            console.print("\n‚úÖ Backend ready! Next: Add models in Open WebUI interface", style="bright_green")
        else:
            console.print("\n‚ö†Ô∏è  Configure API key to proceed", style="bright_yellow")
        
        input("\nPress Enter to continue...")

    def test_connection(self):
        """Test OpenRouter API connection"""
        console.clear()
        console.print(Panel("üß™ Testing OpenRouter Backend Connection", style="bold bright_blue"))
        
        if not self.config['OPENROUTER_API_KEY']:
            console.print("‚ùå No API key configured. Please configure the API first.", style="bright_red")
            input("\nPress Enter to continue...")
            return
        
        try:
            console.print("üîÑ Testing backend authentication...", style="bright_yellow")
            headers = {
                'Authorization': f"Bearer {self.config['OPENROUTER_API_KEY']}",
                'Content-Type': 'application/json'
            }
            
            response = requests.get(
                f"{self.config['OPENROUTER_API_BASE_URL']}/models",
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                model_count = len(data.get('data', []))
                console.print(f"‚úÖ Backend connection successful!", style="bright_green")
                console.print(f"üìä API authenticated with access to {model_count} models", style="bright_cyan")
                console.print("üéØ Ready for UI model addition!", style="bright_green")
                
                # Show a few example models for reference
                if model_count > 0:
                    console.print("\nü§ñ Sample models available:")
                    for model in data['data'][:3]:
                        console.print(f"  ‚Ä¢ {model.get('id', 'Unknown')}", style="dim white")
                    console.print(f"  ... and {model_count - 3} more", style="dim white")
            else:
                console.print(f"‚ùå Backend authentication failed: HTTP {response.status_code}", style="bright_red")
                console.print(f"Response: {response.text[:200]}...", style="dim white")
                console.print("üí° Check your API key configuration", style="bright_yellow")
                
        except requests.exceptions.RequestException as e:
            console.print(f"‚ùå Connection error: {str(e)}", style="bright_red")
        except Exception as e:
            console.print(f"‚ùå Unexpected error: {str(e)}", style="bright_red")
        
        input("\nPress Enter to continue...")

    def restart_docker(self):
        """Restart Docker services"""
        console.clear()
        console.print(Panel("üê≥ Restart Docker Services", style="bold bright_blue"))
        
        if not self.docker_compose_file.exists():
            console.print("‚ùå docker-compose.yaml not found", style="bright_red")
            input("\nPress Enter to continue...")
            return
        
        console.print("üéØ This will restart Open WebUI with your new OpenRouter configuration", style="bright_cyan")
        
        if Confirm.ask("Restart Open WebUI Docker services?"):
            try:
                console.print("üîÑ Stopping services...", style="bright_yellow")
                # Stop services
                subprocess.run(['docker-compose', 'down'], check=True, capture_output=True)
                console.print("üîÑ Starting services with new configuration...", style="bright_yellow")
                # Start services
                subprocess.run(['docker-compose', 'up', '-d'], check=True, capture_output=True)
                
                console.print("‚úÖ Services restarted successfully!", style="bright_green")
                console.print("üåê Open WebUI available at: http://localhost", style="bright_cyan")
                console.print("üìã Next: Add specific models in Admin Panel ‚Üí Connections", style="bright_yellow")
                
            except subprocess.CalledProcessError as e:
                console.print(f"‚ùå Failed to restart services: {e}", style="bright_red")
            except FileNotFoundError:
                console.print("‚ùå Docker Compose not found. Please install Docker Compose.", style="bright_red")
        
        input("\nPress Enter to continue...")

    def generate_env(self):
        """Generate .env template"""
        console.clear()
        console.print(Panel("üìù Generate .env Template", style="bold bright_blue"))
        
        template = """# OpenRouter Backend Configuration for Open WebUI
# Get your API key from: https://openrouter.ai/keys

# Enable/disable OpenRouter API integration (backend authentication)
ENABLE_OPENROUTER_API=true

# Your OpenRouter API key (required for Docker container authentication)
OPENROUTER_API_KEY=your_api_key_here

# OpenRouter API base URL (default is fine for most users)
OPENROUTER_API_BASE_URL=https://openrouter.ai/api/v1

# Other API configurations (optional)
WEBUI_SECRET_KEY=your_secret_key_here
OPENAI_API_KEY=your_openai_key_here
CLAUDE_API_KEY=your_claude_key_here
PERPLEXITY_API_KEY=your_perplexity_key_here

# Docker configuration
WEBUI_DOCKER_TAG=main

# NOTE: After configuring this file:
# 1. Restart Docker services to load the environment variables
# 2. Manually add specific models in Open WebUI Admin Panel ‚Üí Connections
"""
        
        if self.env_file.exists():
            if not Confirm.ask(f".env file already exists. Overwrite?"):
                input("\nPress Enter to continue...")
                return
        
        with open(self.env_file, 'w') as f:
            f.write(template)
        
        console.print(f"‚úÖ Template generated: {self.env_file.absolute()}", style="bright_green")
        console.print("\nüìù Please edit the file and add your actual API keys", style="bright_cyan")
        console.print("üìã Remember: This is only the backend configuration", style="bright_yellow")
        
        input("\nPress Enter to continue...")

    def discover_and_queue_models(self):
        """Enhanced model discovery with queuing and better descriptions"""
        console.clear()
        console.print(Panel("üîç Discover Models & Queue for UI Addition", style="bold bright_blue"))
        
        if not self.config['OPENROUTER_API_KEY']:
            console.print("‚ùå No API key configured. Please configure the API first.", style="bright_red")
            input("\nPress Enter to continue...")
            return
        
        try:
            console.print("üîÑ Fetching models with detailed information...", style="bright_yellow")
            headers = {
                'Authorization': f"Bearer {self.config['OPENROUTER_API_KEY']}",
                'Content-Type': 'application/json'
            }
            
            response = requests.get(
                f"{self.config['OPENROUTER_API_BASE_URL']}/models",
                headers=headers,
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                models = data.get('data', [])
                
                if not models:
                    console.print("‚ùå No models found", style="bright_red")
                    input("\nPress Enter to continue...")
                    return
                
                # Categorize models by provider/purpose
                categorized_models = self.categorize_models(models)
                
                # Show categories
                console.print("\nüìÇ Available Model Categories:")
                for i, (category, model_list) in enumerate(categorized_models.items(), 1):
                    console.print(f"{i}. {category} ({len(model_list)} models)")
                
                # Let user select category
                category_choice = Prompt.ask(
                    "\nSelect category to explore", 
                    choices=[str(i) for i in range(1, len(categorized_models) + 1)]
                )
                
                selected_category = list(categorized_models.keys())[int(category_choice) - 1]
                selected_models = categorized_models[selected_category]
                
                # Show models in selected category
                self.show_category_models(selected_category, selected_models)
                
            else:
                console.print(f"‚ùå Failed to fetch models: HTTP {response.status_code}", style="bright_red")
                
        except requests.exceptions.RequestException as e:
            console.print(f"‚ùå Connection error: {str(e)}", style="bright_red")
        except Exception as e:
            console.print(f"‚ùå Unexpected error: {str(e)}", style="bright_red")
        
        input("\nPress Enter to continue...")

    def categorize_models(self, models: List[Dict]) -> Dict[str, List[Dict]]:
        """Categorize models by provider and purpose"""
        categories = {
            "üîç Web Search & Real-time Info": [],
            "üí¨ Conversational AI (GPT-style)": [],
            "üß† Advanced Reasoning (Claude)": [],
            "üöÄ Open Source (Llama, Mistral)": [],
            "üí∞ Budget-friendly": [],
            "üé® Creative & Content": [],
            "‚ö° Fast & Efficient": [],
            "üî¨ Specialized (Code, Math, etc.)": []
        }
        
        for model in models:
            model_id = model.get('id', '').lower()
            pricing = model.get('pricing', {})
            prompt_price = float(pricing.get('prompt', '999')) if pricing.get('prompt') else 999
            
            # Enhanced model with purpose description
            enhanced_model = {
                **model,
                'purpose_description': self.get_model_purpose(model_id),
                'price_per_1m': prompt_price * 1000000 if prompt_price < 999 else None
            }
            
            # Categorize based on model ID and characteristics
            if 'perplexity' in model_id or 'search' in model_id:
                categories["ÔøΩÔøΩ Web Search & Real-time Info"].append(enhanced_model)
            elif 'gpt' in model_id or 'openai' in model_id:
                categories["üí¨ Conversational AI (GPT-style)"].append(enhanced_model)
            elif 'claude' in model_id or 'anthropic' in model_id:
                categories["üß† Advanced Reasoning (Claude)"].append(enhanced_model)
            elif any(x in model_id for x in ['llama', 'mistral', 'qwen', 'gemma', 'phi']):
                categories["üöÄ Open Source (Llama, Mistral)"].append(enhanced_model)
            elif prompt_price < 0.001:  # Less than $1 per 1M tokens
                categories["üí∞ Budget-friendly"].append(enhanced_model)
            elif any(x in model_id for x in ['creative', 'story', 'novel']):
                categories["üé® Creative & Content"].append(enhanced_model)
            elif any(x in model_id for x in ['fast', 'turbo', 'instant']):
                categories["‚ö° Fast & Efficient"].append(enhanced_model)
            elif any(x in model_id for x in ['code', 'math', 'science']):
                categories["üî¨ Specialized (Code, Math, etc.)"].append(enhanced_model)
            else:
                categories["üí¨ Conversational AI (GPT-style)"].append(enhanced_model)
        
        # Remove empty categories and sort models by price
        return {k: sorted(v, key=lambda x: x.get('price_per_1m', 999)) 
                for k, v in categories.items() if v}

    def get_model_purpose(self, model_id: str) -> str:
        """Get purpose description for a model"""
        model_id = model_id.lower()
        
        purpose_map = {
            # Perplexity models
            'perplexity/llama-3.1-sonar-large-128k-online': 'Real-time web search with large context',
            'perplexity/llama-3.1-sonar-huge-128k-online': 'Most powerful web search model',
            'perplexity/llama-3.1-sonar-small-128k-online': 'Fast, cost-effective web search',
            
            # OpenAI models
            'openai/gpt-4o': 'Latest GPT-4 with vision and multimodal capabilities',
            'openai/gpt-4o-mini': 'Smaller, faster version of GPT-4o',
            'openai/gpt-4-turbo': 'High-performance GPT-4 for complex tasks',
            
            # Claude models
            'anthropic/claude-3.5-sonnet': 'Best Claude model for reasoning and analysis',
            'anthropic/claude-3-haiku': 'Fast Claude model for simple tasks',
            'anthropic/claude-3-opus': 'Most powerful Claude model',
            
            # Llama models
            'meta-llama/llama-3.1-405b-instruct': 'Largest open-source model, exceptional capabilities',
            'meta-llama/llama-3.1-70b-instruct': 'Balanced open-source model',
            'meta-llama/llama-3.1-8b-instruct': 'Fast, efficient open-source model',
        }
        
        # Check for exact matches first
        if model_id in purpose_map:
            return purpose_map[model_id]
        
        # Check for partial matches
        if 'perplexity' in model_id and 'online' in model_id:
            return 'Real-time web search and current information'
        elif 'gpt-4' in model_id:
            return 'Advanced conversational AI with strong reasoning'
        elif 'claude' in model_id:
            return 'Anthropic\'s AI with excellent reasoning and safety'
        elif 'llama' in model_id:
            return 'Meta\'s open-source AI model'
        elif 'mistral' in model_id:
            return 'Mistral\'s efficient open-source AI'
        elif 'code' in model_id:
            return 'Specialized for programming and code generation'
        elif 'math' in model_id:
            return 'Optimized for mathematical reasoning'
        else:
            return 'General-purpose AI model'

    def show_category_models(self, category: str, models: List[Dict]):
        """Show models in a category and allow queuing"""
        console.clear()
        console.print(Panel(f"üìÇ {category}", style="bold bright_blue"))
        
        # Create detailed table
        table = Table(title=f"Models in {category} (sorted by price)")
        table.add_column("ID", style="bright_cyan", no_wrap=True)
        table.add_column("Purpose", style="bright_green")
        table.add_column("Context", style="bright_yellow")
        table.add_column("Price/1M", style="bright_red")
        table.add_column("Queue", style="bright_magenta")
        
        for i, model in enumerate(models[:20], 1):  # Show first 20
            model_id = model.get('id', 'Unknown')
            purpose = model.get('purpose_description', 'General AI model')
            context = str(model.get('context_length', 'Unknown'))
            
            price_per_1m = model.get('price_per_1m')
            if price_per_1m:
                price_str = f"${price_per_1m:.2f}"
            else:
                price_str = "N/A"
            
            # Check if already queued
            queued = "‚úÖ" if any(q['id'] == model_id for q in self.model_queue) else f"[{i}]"
            
            table.add_row(
                model_id,
                purpose[:50] + "..." if len(purpose) > 50 else purpose,
                context,
                price_str,
                queued
            )
        
        console.print(table)
        
        if len(models) > 20:
            console.print(f"\n... and {len(models) - 20} more models in this category", style="dim white")
        
        # Allow queuing models
        console.print(f"\nüéØ Queue models for UI addition:")
        console.print("‚Ä¢ Enter model numbers to queue (e.g., '1,3,5' or '1-3')")
        console.print("‚Ä¢ Type 'all' to queue all models in this category")
        console.print("‚Ä¢ Press Enter to go back")
        
        selection = Prompt.ask("Select models to queue", default="")
        
        if selection.strip():
            self.process_model_selection(selection, models[:20])

    def process_model_selection(self, selection: str, models: List[Dict]):
        """Process user's model selection and add to queue"""
        try:
            if selection.lower() == 'all':
                indices = list(range(len(models)))
            else:
                indices = []
                for part in selection.split(','):
                    part = part.strip()
                    if '-' in part:
                        start, end = map(int, part.split('-'))
                        indices.extend(range(start-1, end))
                    else:
                        indices.append(int(part) - 1)
            
            added = 0
            for i in indices:
                if 0 <= i < len(models):
                    model = models[i]
                    if not any(q['id'] == model['id'] for q in self.model_queue):
                        self.model_queue.append({
                            'id': model['id'],
                            'purpose': model.get('purpose_description', ''),
                            'context_length': model.get('context_length'),
                            'pricing': model.get('pricing', {}),
                            'recommended_name': self.generate_friendly_name(model['id'])
                        })
                        added += 1
            
            console.print(f"\n‚úÖ Added {added} models to queue", style="bright_green")
            
        except ValueError:
            console.print("‚ùå Invalid selection format", style="bright_red")
        
        input("\nPress Enter to continue...")

    def generate_friendly_name(self, model_id: str) -> str:
        """Generate a user-friendly name for a model"""
        # Extract key parts and make readable
        parts = model_id.split('/')
        if len(parts) == 2:
            provider, model = parts
            
            # Clean up provider names
            provider_names = {
                'openai': 'OpenAI',
                'anthropic': 'Claude',
                'perplexity': 'Perplexity',
                'meta-llama': 'Llama',
                'mistralai': 'Mistral'
            }
            
            clean_provider = provider_names.get(provider, provider.title())
            
            # Clean up model names
            clean_model = model.replace('-', ' ').replace('_', ' ').title()
            
            # Special cases
            if 'sonar' in model.lower() and 'online' in model.lower():
                clean_model += ' (Web Search)'
            elif 'gpt-4o' in model.lower():
                clean_model = clean_model.replace('4O', '4o')
            
            return f"{clean_provider} {clean_model}"
        
        return model_id.replace('-', ' ').replace('_', ' ').title()

    def view_queued_models(self):
        """View queued models and provide copy-paste instructions"""
        console.clear()
        console.print(Panel("üìã Queued Models for UI Addition", style="bold bright_blue"))
        
        if not self.model_queue:
            console.print("üì≠ No models queued yet. Use 'Discover & Queue Models' first.", style="bright_yellow")
            input("\nPress Enter to continue...")
            return
        
        # Show queued models
        queue_table = Table(title=f"Models Ready for UI Addition ({len(self.model_queue)} total)")
        queue_table.add_column("#", style="dim white")
        queue_table.add_column("Recommended Name", style="bright_green")
        queue_table.add_column("Model ID", style="bright_cyan")
        queue_table.add_column("Purpose", style="bright_yellow")
        queue_table.add_column("Action", style="bright_magenta")
        
        for i, model in enumerate(self.model_queue, 1):
            queue_table.add_row(
                str(i),
                model['recommended_name'],
                model['id'],
                model['purpose'][:40] + "..." if len(model['purpose']) > 40 else model['purpose'],
                f"[{i}] Remove"
            )
        
        console.print(queue_table)
        
        # Show copy-paste instructions
        console.print("\nüìã UI Addition Instructions:")
        instruction_panel = Panel(
            "1. Go to Open WebUI ‚Üí Admin Panel ‚Üí Settings ‚Üí Connections\n" +
            "2. Click '+' to add a new Direct Connection\n" +
            "3. For each model below, create a new connection with:\n" +
            "   ‚Ä¢ URL: https://openrouter.ai/api/v1\n" +
            f"   ‚Ä¢ API Key: {self.config['OPENROUTER_API_KEY'][:8]}...{self.config['OPENROUTER_API_KEY'][-4:] if self.config['OPENROUTER_API_KEY'] else 'YOUR_KEY'}\n" +
            "   ‚Ä¢ Name: Use the 'Recommended Name' from the table\n" +
            "   ‚Ä¢ Model: Copy the 'Model ID' exactly",
            style="bright_cyan"
        )
        console.print(instruction_panel)
        
        # Action menu
        console.print("\nüéØ Actions:")
        console.print("‚Ä¢ Enter model numbers to remove (e.g., '1,3,5')")
        console.print("‚Ä¢ Type 'export' to save to file")
        console.print("‚Ä¢ Type 'clear' to clear all")
        console.print("‚Ä¢ Press Enter to go back")
        
        action = Prompt.ask("Action", default="")
        
        if action.strip():
            self.process_queue_action(action)

    def process_queue_action(self, action: str):
        """Process actions on the model queue"""
        if action.lower() == 'clear':
            if Confirm.ask("Clear all queued models?"):
                self.model_queue.clear()
                console.print("‚úÖ Queue cleared", style="bright_green")
        
        elif action.lower() == 'export':
            self.export_queue_to_file()
        
        else:
            # Remove specific models
            try:
                indices = [int(x.strip()) - 1 for x in action.split(',')]
                # Remove in reverse order to maintain indices
                for i in sorted(indices, reverse=True):
                    if 0 <= i < len(self.model_queue):
                        removed = self.model_queue.pop(i)
                        console.print(f"‚úÖ Removed {removed['recommended_name']}", style="bright_green")
            except ValueError:
                console.print("‚ùå Invalid action format", style="bright_red")
        
        input("\nPress Enter to continue...")

    def export_queue_to_file(self):
        """Export queued models to a file for easy reference"""
        if not self.model_queue:
            console.print("‚ùå No models to export", style="bright_red")
            return
        
        filename = "openrouter_models_to_add.txt"
        
        with open(filename, 'w') as f:
            f.write("OpenRouter Models to Add in Open WebUI\n")
            f.write("=" * 50 + "\n\n")
            f.write("Instructions:\n")
            f.write("1. Go to Open WebUI ‚Üí Admin Panel ‚Üí Settings ‚Üí Connections\n")
            f.write("2. Click '+' to add a new Direct Connection\n")
            f.write("3. For each model below, create a connection with:\n")
            f.write("   ‚Ä¢ URL: https://openrouter.ai/api/v1\n")
            f.write(f"   ‚Ä¢ API Key: {self.config['OPENROUTER_API_KEY']}\n")
            f.write("   ‚Ä¢ Name: Use the name provided\n")
            f.write("   ‚Ä¢ Model: Copy the Model ID exactly\n\n")
            
            f.write("Models to Add:\n")
            f.write("-" * 20 + "\n\n")
            
            for i, model in enumerate(self.model_queue, 1):
                f.write(f"{i}. {model['recommended_name']}\n")
                f.write(f"   Model ID: {model['id']}\n")
                f.write(f"   Purpose: {model['purpose']}\n")
                f.write(f"   Context: {model.get('context_length', 'Unknown')} tokens\n\n")
        
        console.print(f"‚úÖ Exported to {filename}", style="bright_green")

    def show_help(self):
        """Show help and UI addition guide"""
        console.clear()
        console.print(Panel("‚ùì OpenRouter Backend Configuration & UI Addition Guide", style="bold bright_blue"))
        
        help_content = """
üéØ UNDERSTANDING THE TWO-STEP PROCESS:

Step 1: Backend Configuration (This Script)
‚Ä¢ Sets up API authentication in Docker environment
‚Ä¢ Required for Docker container to connect to OpenRouter
‚Ä¢ Without this: Manual UI model addition will fail with auth errors

Step 2: UI Model Addition (Manual Process)
‚Ä¢ Tells Open WebUI which specific models you want to use
‚Ä¢ Creates "Direct Connections" for individual models
‚Ä¢ Required for models to appear in the dropdown selector

üîß BACKEND CONFIGURATION (This Script):
1. Configure your OpenRouter API key
2. Test the connection to verify it works
3. Restart Docker services to load new environment
4. ‚úÖ Backend is now ready for UI model addition

üñ•Ô∏è  UI MODEL ADDITION (Manual Process):
1. Open your browser ‚Üí http://localhost
2. Go to Admin Panel ‚Üí Settings ‚Üí Connections
3. Click '+' to add a new Direct Connection
4. For each model:
   ‚Ä¢ URL: https://openrouter.ai/api/v1
   ‚Ä¢ API Key: Your OpenRouter API key
   ‚Ä¢ Name: A friendly name (e.g., "Perplexity Web Search")
   ‚Ä¢ Model: The exact model ID (e.g., "perplexity/llama-3.1-sonar-large-128k-online")
5. Test the connection (should show ‚úÖ success)
6. ‚úÖ Model now appears in your dropdown selector

üîç RECOMMENDED WORKFLOW:
1. Run this script ‚Üí Configure API
2. Use "Discover & Queue Models" ‚Üí Research and select models
3. Use "View Queued Models" ‚Üí Get copy-paste instructions
4. Go to UI ‚Üí Add each queued model as Direct Connection
5. ‚úÖ Start using your OpenRouter models!

üí° WHY THIS APPROACH:
‚Ä¢ Security: API key stored in environment variables
‚Ä¢ Performance: Only load models you actually want to use
‚Ä¢ Cost Control: Prevents accidental usage of expensive models
‚Ä¢ Flexibility: Easy to add/remove models as needed
"""
        
        console.print(help_content, style="bright_cyan")
        input("\nPress Enter to continue...")

    def run(self):
        """Main application loop"""
        try:
            while True:
                self.show_header()
                self.show_workflow_info()
                self.show_status()
                self.show_menu()
                
                choice = Prompt.ask("\nSelect an option", choices=["1", "2", "3", "4", "5", "6", "7", "8", "9"])
                
                if choice == "1":
                    self.configure_api()
                elif choice == "2":
                    self.view_config()
                elif choice == "3":
                    self.test_connection()
                elif choice == "4":
                    self.discover_and_queue_models()
                elif choice == "5":
                    self.view_queued_models()
                elif choice == "6":
                    self.restart_docker()
                elif choice == "7":
                    self.generate_env()
                elif choice == "8":
                    self.show_help()
                elif choice == "9":
                    console.clear()
                    console.print("üëã Backend configuration complete! Next: Add models in UI", style="bright_green")
                    break
                
                # Reload config after any changes
                self.config = self.load_config()
                
        except KeyboardInterrupt:
            console.clear()
            console.print("\nüëã Backend configuration saved. Next: Add models in UI", style="bright_green")

if __name__ == "__main__":
    try:
        manager = OpenRouterManager()
        manager.run()
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="bold red")
        sys.exit(1) 